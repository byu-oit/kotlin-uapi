diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 5-response-body/pom.xml 6-listing-resources/pom.xml
--- 5-response-body/pom.xml	2018-11-14 10:45:11.000000000 -0700
+++ 6-listing-resources/pom.xml	2018-11-20 14:21:46.000000000 -0700
@@ -4,11 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <groupId>edu.byu.uapi.library</groupId>
-    <artifactId>tutorial-5-response-body</artifactId>
+    <artifactId>tutorial-6-listing-resources</artifactId>
     <version>1.0-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>library-tutorial-api 5-response-body</name>
+    <name>library-tutorial-api 6-listing-resources</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <kotlin.version>1.3.10</kotlin.version>
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 5-response-body/src/main/kotlin/LibraryApp.kt 6-listing-resources/src/main/kotlin/LibraryApp.kt
--- 5-response-body/src/main/kotlin/LibraryApp.kt	2018-11-16 14:41:26.000000000 -0700
+++ 6-listing-resources/src/main/kotlin/LibraryApp.kt	2018-11-20 14:22:11.000000000 -0700
@@ -1,3 +1,4 @@
+
 import edu.byu.uapi.http.spark.startSpark
 import edu.byu.uapi.library.BooksResource
 import edu.byu.uapi.library.LibraryUserContextFactory
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 5-response-body/src/main/kotlin/edu/byu/uapi/library/BookListParams.kt 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BookListParams.kt
--- 5-response-body/src/main/kotlin/edu/byu/uapi/library/BookListParams.kt	1969-12-31 17:00:00.000000000 -0700
+++ 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BookListParams.kt	2018-11-13 16:24:24.000000000 -0700
@@ -0,0 +1,111 @@
+package edu.byu.uapi.library
+
+import edu.byu.uapi.kotlin.examples.library.*
+import edu.byu.uapi.spi.input.ListParams
+import edu.byu.uapi.spi.input.SearchParams
+import edu.byu.uapi.spi.input.SortParams
+import edu.byu.uapi.spi.input.SubsetParams
+
+data class BookListParams(
+    override val sort: SortParams<BookSortProperty>,
+    override val filters: BookFilters?,
+    override val search: SearchParams<BookSearchContext>?,
+    override val subset: SubsetParams
+) : ListParams.WithSort<BookSortProperty>,
+    ListParams.WithFilters<BookFilters>,
+    ListParams.WithSearch<BookSearchContext>,
+    ListParams.WithSubset
+
+enum class BookSortProperty(val domain: BookSortableColumns) {
+    OCLC(BookSortableColumns.OCLC),
+    TITLE(BookSortableColumns.TITLE),
+    PUBLISHER_NAME(BookSortableColumns.PUBLISHER_NAME),
+    ISBN(BookSortableColumns.ISBN),
+    PUBLISHED_YEAR(BookSortableColumns.PUBLISHED_YEAR),
+    AUTHOR_NAME(BookSortableColumns.FIRST_AUTHOR_NAME)
+}
+
+enum class BookSearchContext {
+    TITLES,
+    AUTHORS,
+    GENRES,
+    CONTROL_NUMBERS;
+}
+
+fun BookSearchContext.toDomain(searchText: String) = when(this) {
+    BookSearchContext.TITLES -> BookTitleSearch(searchText)
+    BookSearchContext.AUTHORS -> BookAuthorSearch(searchText)
+    BookSearchContext.GENRES -> BookGenreSearch(searchText)
+    BookSearchContext.CONTROL_NUMBERS -> BookControlNumbersSearch(searchText)
+}
+
+data class BookFilters(
+    val isbns: Set<String>,
+    val title: String?,
+    val subtitle: String?,
+    val publisherIds: Set<Int>,
+    val publisherNames: Set<String>,
+    val publicationYear: Int?,
+    val restricted: Boolean?,
+    val authors: AuthorFilters?,
+    val genres: GenreFilters?
+) {
+    fun toDomain() = if (hasAnyValues) {
+        BookQueryFilters(
+            isbn = isbns,
+            title = title,
+            subtitle = subtitle,
+            publisherId = publisherIds,
+            publisherNames = publisherNames,
+            publicationYear = publicationYear,
+            restricted = restricted,
+            authors = authors?.toDomain(),
+            genres = genres?.toDomain()
+        )
+    } else {
+        null
+    }
+
+    val hasAnyValues =
+        isbns.isNotEmpty()
+            || title != null
+            || subtitle != null
+            || publisherIds.isNotEmpty()
+            || publisherNames.isNotEmpty()
+            || publicationYear != null
+            || restricted != null
+            || (authors == null || authors.hasAnyValues)
+            || (genres == null || genres.hasAnyValues)
+}
+
+data class AuthorFilters(
+    val ids: Set<Int>,
+    val names: Set<String>
+) {
+    fun toDomain() = if (hasAnyValues) {
+        AuthorQueryFilters(
+            id = ids,
+            name = names
+        )
+    } else {
+        null
+    }
+
+    val hasAnyValues = ids.isNotEmpty() || names.isNotEmpty()
+}
+
+data class GenreFilters(
+    val codes: Set<String>,
+    val names: Set<String>
+) {
+    fun toDomain() = if (hasAnyValues) {
+        GenreQueryFilters(
+            code = codes,
+            name = names
+        )
+    } else {
+        null
+    }
+
+    val hasAnyValues = codes.isNotEmpty() || names.isNotEmpty()
+}
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 5-response-body/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt
--- 5-response-body/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt	2018-11-14 10:28:58.000000000 -0700
+++ 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt	2018-11-20 14:29:24.000000000 -0700
@@ -6,8 +6,46 @@
 import edu.byu.uapi.kotlin.examples.library.Library
 import edu.byu.uapi.server.resources.identified.IdentifiedResource
 import edu.byu.uapi.server.resources.identified.fields
+import edu.byu.uapi.spi.input.ListWithTotal
+import edu.byu.uapi.spi.input.UAPISortOrder
 
-class BooksResource : IdentifiedResource<LibraryUser, Long, Book> {
+class BooksResource : IdentifiedResource<LibraryUser, Long, Book>,
+                      IdentifiedResource.Listable.WithSort<LibraryUser, Long, Book, BookListParams, BookSortProperty>,
+                      IdentifiedResource.Listable.WithFilters<LibraryUser, Long, Book, BookListParams, BookFilters>,
+                      IdentifiedResource.Listable.WithSearch<LibraryUser, Long, Book, BookListParams, BookSearchContext>,
+                      IdentifiedResource.Listable.WithSubset<LibraryUser, Long, Book, BookListParams>
+{
+
+    override fun list(
+        userContext: LibraryUser,
+        params: BookListParams
+        ): ListWithTotal<Book> {
+        val search = params.search?.run { context.toDomain(text) }
+        val result = Library.listBooks(
+            includeRestricted = userContext.canViewRestrictedBooks,
+            sortColumns = params.sort.properties.map { it.domain },
+            sortAscending = params.sort.order == UAPISortOrder.ASCENDING,
+            filters = params.filters?.toDomain(),
+            search = search,
+            subsetSize = params.subset.subsetSize,
+            subsetStart = params.subset.subsetStartOffset
+        )
+        return ListWithTotal(
+            totalItems = result.totalItems,
+            values = result.list
+        )
+    }
+
+    override val listDefaultSortProperties: List<BookSortProperty> = listOf(BookSortProperty.TITLE, BookSortProperty.OCLC)
+    override val listDefaultSortOrder: UAPISortOrder = UAPISortOrder.ASCENDING
+    override val listDefaultSubsetSize: Int = 50
+    override val listMaxSubsetSize: Int = 100
+    override fun listSearchContexts(value: BookSearchContext) = when(value) {
+        BookSearchContext.TITLES -> listOf("title", "subtitles")
+        BookSearchContext.AUTHORS -> listOf("authors.name")
+        BookSearchContext.GENRES -> listOf("genres.codes", "genres.name")
+        BookSearchContext.CONTROL_NUMBERS -> listOf("oclc", "isbn")
+    }
 
     override fun loadModel(
         userContext: LibraryUser,
