diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 6-listing-resources/pom.xml 7-mutating-resources/pom.xml
--- 6-listing-resources/pom.xml	2018-11-20 14:21:46.000000000 -0700
+++ 7-mutating-resources/pom.xml	2018-11-20 14:30:56.000000000 -0700
@@ -4,11 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <groupId>edu.byu.uapi.library</groupId>
-    <artifactId>tutorial-6-listing-resources</artifactId>
+    <artifactId>tutorial-7-mutating-resources</artifactId>
     <version>1.0-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>library-tutorial-api 6-listing-resources</name>
+    <name>library-tutorial-api 7-mutating-resources</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <kotlin.version>1.3.10</kotlin.version>
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt
--- 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt	2018-12-03 12:55:43.000000000 -0700
+++ 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/BooksResource.kt	2018-12-03 12:56:47.000000000 -0700
@@ -1,11 +1,7 @@
 package edu.byu.uapi.library
 
-import edu.byu.uapi.kotlin.examples.library.Author
-import edu.byu.uapi.kotlin.examples.library.Book
-import edu.byu.uapi.kotlin.examples.library.Genre
-import edu.byu.uapi.kotlin.examples.library.Library
-import edu.byu.uapi.server.resources.identified.ListResource
-import edu.byu.uapi.server.resources.identified.fields
+import edu.byu.uapi.kotlin.examples.library.*
+import edu.byu.uapi.server.resources.identified.*
 import edu.byu.uapi.spi.input.ListWithTotal
 import edu.byu.uapi.model.UAPISortOrder
 
@@ -13,7 +9,11 @@
                       ListResource.ListWithSort<LibraryUser, Long, Book, BookListParams, BookSortProperty>,
                       ListResource.ListWithFilters<LibraryUser, Long, Book, BookListParams, BookFilters>,
                       ListResource.ListWithSearch<LibraryUser, Long, Book, BookListParams, BookSearchContext>,
-                      ListResource.ListWithSubset<LibraryUser, Long, Book, BookListParams> {
+                      ListResource.ListWithSubset<LibraryUser, Long, Book, BookListParams>,
+                      ListResource.Creatable<LibraryUser, Long, Book, CreateBook>,
+                      ListResource.Updatable<LibraryUser, Long, Book, UpdateBook>,
+                      ListResource.CreatableWithId<LibraryUser, Long, Book, UpdateBook>,
+                      ListResource.Deletable<LibraryUser, Long, Book> {
 
     override val pluralName: String = "books"
 
@@ -63,7 +63,7 @@
     override fun listSearchContexts(value: BookSearchContext) = when (value) {
         BookSearchContext.TITLES -> listOf("title", "subtitles")
         BookSearchContext.AUTHORS -> listOf("authors.name")
-        BookSearchContext.GENRES -> listOf("genres.codes", "genres.name")
+        BookSearchContext.GENRES -> listOf("genreCodes.codes", "genreCodes.name")
         BookSearchContext.CONTROL_NUMBERS -> listOf("oclc", "isbn")
     }
 
@@ -78,13 +78,12 @@
             doc = "The main title of the book"
             modifiable { libraryUser, book, title -> libraryUser.canModifyBooks }
         }
-        value<Int>("publisher_id") {
-            getValue { book -> book.publisher.id }
+        value(Book::publisher, Publisher::id) {
             displayLabel = "Publisher"
             modifiable { libraryUser, book, value -> libraryUser.canModifyBooks }
 
-            description { book, publisherId -> book.publisher.commonName }
-            longDescription { book, publisherId -> book.publisher.fullName }
+            description(Publisher::commonName)
+            longDescription(Publisher::fullName)
         }
         value(Book::availableCopies) {
             isDerived = true
@@ -122,4 +121,141 @@
         }
     }
 
+    override fun canUserCreate(userContext: LibraryUser): Boolean {
+        return userContext.canCreateBooks
+    }
+
+    override fun handleCreate(
+        userContext: LibraryUser,
+        input: CreateBook
+    ): CreateResult<Long> {
+        val publisher = Library.getPublisher(input.publisherId)
+            ?: return CreateResult.InvalidInput("publisher_id", "No such publisher exists")
+        val authors = input.authorIds.map {
+            Library.getAuthor(it) ?: return CreateResult.InvalidInput("author_ids", "No such author exists")
+        }
+        val genres = input.genreCodes.map {
+            Library.getGenreByCode(it) ?: return CreateResult.InvalidInput("genre_codes", "No such genre exists")
+        }
+
+        Library.createBook(NewBook(
+            oclc = input.oclc,
+            isbn = input.isbn,
+            title = input.title,
+            subtitles = input.subtitles,
+            publishedYear = input.publishedYear.value,
+            publisher = publisher,
+            authors = authors,
+            genres = genres,
+            restricted = input.restricted
+        ))
+
+        return CreateResult.Success(input.oclc)
+    }
+
+    override fun canUserUpdate(
+        userContext: LibraryUser,
+        id: Long,
+        model: Book
+    ): Boolean {
+        return userContext.canModifyBooks
+    }
+
+    override fun canBeUpdated(
+        id: Long,
+        model: Book
+    ): Boolean {
+        return true
+    }
+
+    override fun handleUpdate(
+        userContext: LibraryUser,
+        id: Long,
+        model: Book,
+        input: UpdateBook
+    ): UpdateResult {
+        val publisher = Library.getPublisher(input.publisherId)
+            ?: return UpdateResult.InvalidInput("publisher_id", "No such publisher exists")
+        val authors = input.authorIds.map {
+            Library.getAuthor(it) ?: return UpdateResult.InvalidInput("author_ids", "No such author exists")
+        }
+        val genres = input.genreCodes.map {
+            Library.getGenreByCode(it) ?: return UpdateResult.InvalidInput("genre_codes", "No such genre exists")
+        }
+
+        Library.updateBook(NewBook(
+            oclc = id,
+            isbn = input.isbn,
+            title = input.title,
+            subtitles = input.subtitles,
+            publishedYear = input.publishedYear.value,
+            publisher = publisher,
+            authors = authors,
+            genres = genres,
+            restricted = input.restricted
+        ))
+
+        return UpdateResult.Success
+    }
+
+    override fun canUserCreateWithId(
+        userContext: LibraryUser,
+        id: Long
+    ): Boolean {
+        return userContext.canCreateBooks
+    }
+
+    override fun handleCreateWithId(
+        userContext: LibraryUser,
+        id: Long,
+        input: UpdateBook
+    ): CreateWithIdResult {
+        val publisher = Library.getPublisher(input.publisherId)
+            ?: return CreateWithIdResult.InvalidInput("publisher_id", "No such publisher exists")
+        val authors = input.authorIds.map {
+            Library.getAuthor(it) ?: return CreateWithIdResult.InvalidInput("author_ids", "No such author exists")
+        }
+        val genres = input.genreCodes.map {
+            Library.getGenreByCode(it) ?: return CreateWithIdResult.InvalidInput("genre_codes", "No such genre exists")
+        }
+
+        Library.createBook(NewBook(
+            oclc = id,
+            isbn = input.isbn,
+            title = input.title,
+            subtitles = input.subtitles,
+            publishedYear = input.publishedYear.value,
+            publisher = publisher,
+            authors = authors,
+            genres = genres,
+            restricted = input.restricted
+        ))
+
+        return CreateWithIdResult.Success
+    }
+
+    override fun canUserDelete(
+        userContext: LibraryUser,
+        id: Long,
+        model: Book
+    ): Boolean {
+        return userContext.canDeleteBooks
+    }
+
+    override fun canBeDeleted(
+        id: Long,
+        model: Book
+    ): Boolean {
+        val copies = Library.hasCheckedOutCopies(model.id)
+        return !copies //Cannot delete books that have checked-out copies!
+    }
+
+    override fun handleDelete(
+        userContext: LibraryUser,
+        id: Long,
+        model: Book
+    ): DeleteResult {
+        Library.deleteBook(model.id)
+        return DeleteResult.Success
+    }
 }
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/CreateBook.kt 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/CreateBook.kt
--- 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/CreateBook.kt	1969-12-31 17:00:00.000000000 -0700
+++ 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/CreateBook.kt	2018-11-27 12:46:22.000000000 -0700
@@ -0,0 +1,23 @@
+package edu.byu.uapi.library
+
+import org.hibernate.validator.constraints.ISBN
+import java.time.Year
+import javax.validation.constraints.NotBlank
+import javax.validation.constraints.NotEmpty
+import javax.validation.constraints.Positive
+
+data class CreateBook(
+    @get:Positive
+    val oclc: Long,
+    @get:ISBN.List(ISBN(type = ISBN.Type.ISBN_10), ISBN(type = ISBN.Type.ISBN_13))
+    val isbn: String? = null,
+    @get:NotBlank
+    val title: String,
+    val subtitles: List<@NotBlank String> = emptyList(),
+    val publishedYear: Year,
+    @get:Positive
+    val publisherId: Int,
+    val authorIds: List<@Positive Long>,
+    val genreCodes: Set<@NotEmpty String> = emptySet(),
+    val restricted: Boolean = false
+)
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/LibraryUser.kt 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/LibraryUser.kt
--- 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/LibraryUser.kt	2018-11-07 13:13:51.000000000 -0700
+++ 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/LibraryUser.kt	2018-11-21 14:53:24.000000000 -0700
@@ -13,8 +13,10 @@
   val isLibrarian: Boolean
 ) {
     val isCardholder = cardholderId != null
+    val canCreateBooks: Boolean = isLibrarian
     val canModifyBooks: Boolean = isLibrarian
     val canViewRestrictedBooks = isLibrarian
+    val canDeleteBooks: Boolean = isLibrarian
 
     fun canViewBook(model: Book): Boolean {
         return !model.restricted || this.canViewRestrictedBooks
diff -urN -x '*.iml' -x '*.orig' -x 'target/*' 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/UpdateBook.kt 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/UpdateBook.kt
--- 6-listing-resources/src/main/kotlin/edu/byu/uapi/library/UpdateBook.kt	1969-12-31 17:00:00.000000000 -0700
+++ 7-mutating-resources/src/main/kotlin/edu/byu/uapi/library/UpdateBook.kt	2018-11-27 12:46:10.000000000 -0700
@@ -0,0 +1,22 @@
+package edu.byu.uapi.library
+
+import org.hibernate.validator.constraints.ISBN
+import java.time.Year
+import javax.validation.Valid
+import javax.validation.constraints.NotBlank
+import javax.validation.constraints.Positive
+
+data class UpdateBook(
+    @get:ISBN.List(ISBN(type = ISBN.Type.ISBN_10), ISBN(type = ISBN.Type.ISBN_13))
+    val isbn: String? = null,
+    @get:NotBlank
+    val title: String,
+    @get:Valid
+    val subtitles: List<@NotBlank String> = emptyList(),
+    val publishedYear: Year,
+    @get:Positive
+    val publisherId: Int,
+    val authorIds: List<@Positive Long>,
+    val genreCodes: Set<@NotBlank String> = emptySet(),
+    val restricted: Boolean = false
+)
